import 'package:easy_localization/easy_localization.dart';
import 'package:find_pe/common/db/cache.dart';
import 'package:flutter/material.dart';
import 'package:find_pe/app/router.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  debugPrint("–§–æ–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.notification?.title}");
}

class App extends StatefulWidget {
  const App({super.key});

  @override
  State<StatefulWidget> createState() => _AppState();
}

class _AppState extends State<App> {
  final FlutterLocalNotificationsPlugin _localNotificationsPlugin =
      FlutterLocalNotificationsPlugin();
  bool _isNotificationEnabled = true;

  @override
  void initState() {
    super.initState();
    _setupLocalNotifications();
    _setupFirebaseMessaging();
  }

  Future<void> _setupFirebaseMessaging() async {
    final FirebaseMessaging messaging = FirebaseMessaging.instance;

    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      debugPrint('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');

      String? token = await messaging.getToken();
      debugPrint("FCM Token: $token");

      cache.setString('fcm_token', '$token');

      setState(() {});

      FirebaseMessaging.onMessage.listen((RemoteMessage message) {
        debugPrint(
          '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: ${message.notification?.title}',
        );

        if (_isNotificationEnabled) {
          _showLocalNotification(
            title: message.notification?.title ?? 'Yangi xabar',
            body: message.notification?.body ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
          );
        }
      });

      FirebaseMessaging.onBackgroundMessage(
        _firebaseMessagingBackgroundHandler,
      );
    } else {
      debugPrint('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
  }
Future<void> _setupLocalNotifications() async {
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('notification_icon'); // ‚úÖ –£–±—Ä–∞–ª–∏ @drawable/

  print("üîî –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É: notification_icon"); // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –∫–æ–¥

  const InitializationSettings initializationSettings =
      InitializationSettings(android: initializationSettingsAndroid);

  await _localNotificationsPlugin.initialize(initializationSettings);
}

Future<void> _showLocalNotification({
  required String title,
  required String body,
}) async {
  if (!_isNotificationEnabled) return;

  print("‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π: notification_icon"); // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º

  const AndroidNotificationDetails androidNotificationDetails =
      AndroidNotificationDetails(
        'default_channel_id',
        '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª',
        channelDescription: '–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        importance: Importance.high,
        priority: Priority.high,
        icon: 'notification_icon', // ‚úÖ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ drawable/
      );

  const NotificationDetails notificationDetails = NotificationDetails(
    android: androidNotificationDetails,
  );

  await _localNotificationsPlugin.show(0, title, body, notificationDetails);
}

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      title: "FindPE",
      routerConfig: router,
      locale: context.locale,
      localizationsDelegates: context.localizationDelegates,
      supportedLocales: context.supportedLocales,
    );
  }
}
